record `de.ecspride.ArrayAccess1`  @kind class @AccessFlag PUBLIC {
   }
procedure `byte`[] `com.military.crypto.core.SimpleCrypto.toByte` (`java.lang.String` String_v5 @kind object) @owner ^`com.military.crypto.core.SimpleCrypto` @signature `Lcom/military/crypto/core/SimpleCrypto;.toByte:(Ljava/lang/String;)[B` @Access PRIVATE_STATIC {
      `java.lang.String` String_v3;
      `int` int_v4;
      `byte`[] byte_arr1_v2;
      `java.lang.Integer` Integer_v3;
      `int` int_v1;
      `byte` byte_v3;
      `int` int_v0;
      `int` int_v3;

#L0039bc.   call int_v3:=  `java.lang.String.length`(String_v5) @signature `Ljava/lang/String;.length:()I` @classDescriptor ^`java.lang.String` @kind virtual;
#L0039c4.   int_v1:= int_v3 / 2  @kind int;
#L0039c8.   byte_arr1_v2:= new `byte`[int_v1];
#L0039cc.   int_v0:= 0I  @kind int;
#L0039ce.   if int_v0 < int_v1 then goto L0039d4;
#L0039d2.   return byte_arr1_v2  @kind object;
#L0039d4.   int_v3:= int_v0 * 2  @kind int;
#L0039d8.   int_v4:= int_v0 * 2  @kind int;
#L0039dc.   int_v4:= int_v4 + 2  @kind int;
#L0039e0.   call String_v3:=  `java.lang.String.substring`(String_v5, int_v3, int_v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @classDescriptor ^`java.lang.String` @kind virtual;
#L0039e8.   int_v4:= 16I  @kind int;
#L0039ec.   call Integer_v3:=  `java.lang.Integer.valueOf`(String_v3, int_v4) @signature `Ljava/lang/Integer;.valueOf:(Ljava/lang/String;I)Ljava/lang/Integer;` @classDescriptor ^`java.lang.Integer` @kind static;
#L0039f4.   call byte_v3:=  `java.lang.Integer.byteValue`(Integer_v3) @signature `Ljava/lang/Integer;.byteValue:()B` @classDescriptor ^`java.lang.Integer` @kind virtual;
#L0039fc.   byte_arr1_v2[int_v0]:= byte_v3  @kind byte;
#L003a00.   int_v0:= int_v0 + 1  @kind int;
#L003a04.   goto L0039ce;
}